<?php
/**
 *
 * The content is generated by using TextMate, and edited by yuhari.
 *
 *
 * 推送上下文
 *
 *
 * @author 	   yuhari
 * @maintainer yuhari
 * @version    1.0.0
 * @modified   2020/03/25 14:00:19
 *
 */
namespace UPush ;

use UPush\context as C;

class Context {
	
	protected $app_id ;
	
	protected $app_secret ;
	
	protected $api = 'https://msgapi.umeng.com/api/send' ;
	
	protected $params = array() ;
	
	protected $payload ;
	
	protected $policy ;
	
	public function __construct($app_id, $app_secret) {
		
		$this->app_id = $app_id ;
		$this->app_secret = $app_secret ;
		
	}
	
	// 设置测试模式
	public function setDebugMode($flag) {
		$this->params['production_mode'] = $flag ? "true" : "false" ;
	}
	
	// 设置推送类型和目标
	public function setTarget($target) {
		if ($type = $target['type']) {
			// 必填，消息发送类型, unicast|listcast|filecast|broadcast|groupcast|customizedcast
			$this->set('type', $type) ;
			
			if ($type == 'unicast' || $type == 'listcast') {
				// 当type=unicast时, 必填, 表示指定的单个设备
				// 当type=listcast时, 必填, 要求不超过500个, 以英文逗号分隔	
				$this->set('device_tokens', $target['id']) ;
			}
			
			if ($type == 'customizedcast') {
				// 当type=customizedcast时, 必填
				$this->set('alias_type', $target['id_type']) ;
				$this->set('alias', $target['id']) ;
			}
		}
	}
	
	// 设置推送描述
	public function setDescription($msg) {
		$this->set('description', $msg) ;
	}
	
	public function setAttribute($key, $val) {
		$this->set($key, $val) ;
	}
	
	// 消息主体
	public function getModulePayload() {
		if (!$this->payload) {
			$this->payload = new C\Payload ;
		}
		
		return $this->payload ;
	}
	
	// 消息策略
	public function getModulePolicy() {
		if (!$this->policy) {
			$this->policy = new C\Policy ;
		}
		
		return $this->policy ;
	}
	
	protected function set($key, $val) {
		$this->params[$key] = $val ;
		return $this ;
	}
	
	public function send() {
		$args = $this->params ;
		$args['payload'] = $this->getModulePayload()->getParams() ;
		$args['policy']  = $this->getModulePolicy()->getParams() ;
		$args['appkey']  = $this->app_id ;
		$args['timestamp'] = time() . '';
		
		$method = 'POST' ;
		$url	= $this->api ;
		$body	= json_encode($args, JSON_FORCE_OBJECT) ;
		$secret = $this->app_secret ;

		$str = sprintf("%s%s%s%s", $method, $url, $body, $secret) ;
		$sign = md5($str) ;
		
		$ret = $this->curl(sprintf("%s?sign=%s", $url, $sign), $body, 'POST') ;
		if ($ret = @json_decode($ret)) {
			return $ret ;
		}
		
		return null ;
 	}
	
	protected function curl($url, $params = array(), $type = 'GET') {
		try {
		    $ch = curl_init() ;
		    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
		    if ($type == 'POST'){
		        curl_setopt($ch, CURLOPT_POST, TRUE);
		        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
		    }elseif ($type == 'GET'){
				$url .= '?' ;
		        $url .= is_array($params) ? http_build_query($params) : $params ;
		    }

		    curl_setopt($ch, CURLOPT_URL, $url);
		 //   curl_setopt($ch, CURLOPT_HTTPHEADERS, array('Content-Type: application/json'));
			curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
			curl_setopt($ch, CURLOPT_TIMEOUT, 5);
		    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
		    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
		    $ret = curl_exec($ch);
		    curl_close($ch);
		    return $ret ;
		} catch (\Exception $e) {
			return '' ;
		}
	}
}
